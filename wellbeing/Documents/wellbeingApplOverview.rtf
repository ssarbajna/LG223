{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgray\c0;\csgray\c100000;}
\margl1440\margr1440\vieww17620\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Overview of Appl: wellbeing\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
INPUTs \'97> PROCESSING \'97> OUTPUTs\
\
External stimuli (INPUTs) \'97> \
System to capture them (hardware interface, equivalent to cognitive senses) \'97> \
System to translate from hardware language to software information \'97> \
Transmit the info to main processing engine \'97> \
PROCESSING (equivalent to mind) \'97>\
Read the results into the System to translate from software to hardware \'97>  \
System to instruct hardware according to info coming from main processing engine\'97> \
System to transmit these instructions to external world (equivalent to outbound actuations)\
OUTPUTs (equivalent to outbound senses or, actuations)\
\
Candidates for software implementation:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
System to translate from hardware language to software information\
Transmit the info to main processing engine\
PROCESSING (equivalent to mind)\
Read the results into the System to translate from software to hardware\
System to instruct hardware according to info coming from main processing engine\
\
Candidates for hardware implementation:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
System to capture external stimuli (hardware interface, equivalent to cognitive senses)\
System to translate non-physical instructions to external world (equivalent to outbound actuations)\
\
Software Module: exrest (serves as REST webservice provider)\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Technology: Java\
\
Module:  1)System to translate from hardware language to software information\
               2)Transmit the info to main processing engine (via REST websvc calls)\
               3)Read the results into the System to translate from software to hardware\
               4)System to instruct hardware according to info coming from main processing engine\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Technology: Python\
a.REST client module to interface with main processing engine\
b.Input module to collect external stimuli.\
\
One/many-to-one/many relations exist between a & b.\
(will try to implement these by multithreading, so one flow does not have to wait for io or, delay in other flow)\
\
Module: database to support main processing engine \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Technology: cassandra\
\
\
Syntax to export/import Jenkins job from Command Line Interface\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 \CocoaLigature0 Export (here job name is exrest_f1):\
java -jar jenkins-cli.jar -s http://localhost:8080/ get-job --username jenkins --password jenkins exrest_f1 > exrest_f1.xml\
\
Import(we are creating a job called exrest_f1imp from above export):\
java -jar jenkins-cli.jar -s http://localhost:8080/ create-job --username jenkins --password jenkins exrest_f1imp < exrest_f1.xml\
\
Deployment of the exrest REST module:\
========================================\
1) Stage the Jenkins built war file in aws host via scp:\
   scp -v -i ~/sudip.pem target/exrest.war ubuntu@ec2-18-216-212-188.us-east-2.compute.amazonaws.com:dockerTomcatWork/target\
\
relevant Docker commands:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
get rid of relevant running containers: docker ps -a;  docker rm $(docker ps -a -q); docker images; \
get rid of the old docker image: docker rmi tomcat:withExrest; docker images\
build the image again: docker build -t tomcat:withExrest .; docker images\
finally run the modified image: docker run --name=tomEx -p 80:8080 tomcat:withExrest\
\
\
After this the REST WS can be accessed at: http://ec2-18-216-212-188.us-east-2.compute.amazonaws.com/exrest/webapi/inventories/2\
\
**** takes time to get first response; subsequent response is fast*******\
\
\

\f0\fs24 \cf0 \cb1 \CocoaLigature1 \
}